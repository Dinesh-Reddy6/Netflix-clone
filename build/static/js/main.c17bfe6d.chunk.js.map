{"version":3,"sources":["Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","axios","get","result","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","original_name","then","url","urlParams","URLSearchParams","URL","search","console","log","catch","err","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOrginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchDocumentaries","Banner","str","n","randMovie","setRandMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","overview","substr","Nav","props","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","App","user","setUser","provider","auth","GoogleAuthProvider","Fragment","fontSize","backgroundColor","color","padding","borderRadius","marginLeft","marginTop","margin","signInWithPopup","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c17bfe6d.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react'\r\n//import axios from './axios.js'\r\nimport axios from 'axios';\r\nimport './Row.css'\r\nimport Youtube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_url=\"https://image.tmdb.org/t/p/w154\";\r\n//base url to fetch images from tmdb\r\n\r\nfunction Row({title,fetchUrl,isLargeRow}) {\r\n\r\n    const [movies,setMovies]=useState([]);\r\n    const [trailerUrl,setTrailerUrl]=useState(\"\");\r\n\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n           const result=await axios.get(`https://api.themoviedb.org/3${fetchUrl}`);\r\n           //console.log(result);\r\n           setMovies(result.data.results);\r\n        }\r\n    \r\n    fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    const opts={\r\n        height:\"300\",\r\n        width:\"100%\",\r\n        playerVars:{\r\n            autoplay:1,\r\n            'origin': 'http://localhost:3000' \r\n        },\r\n    }\r\n\r\n    const handleClick=(movie)=>{\r\n        //if video is playing close it,else if video is not playing and user clicked on movie- then play video.(like toggler)\r\n        if(trailerUrl){\r\n            setTrailerUrl(\"\");\r\n        }\r\n        else{\r\n            movieTrailer(movie?.name|| movie?.original_name|| \"\")\r\n            .then((url)=>{\r\n                //we get complete youtube url: \"https://www.youtube.com/watch?v=XhJURFJHmdgnVGNkU\"\r\n                //but we only want the parameter v from url i.e. XhJURFJHmdgnVGNkU\r\n                const urlParams=new URLSearchParams(new URL(url).search);\r\n                console.log(urlParams);\r\n                setTrailerUrl(urlParams.get('v')); // getting v param\r\n            })\r\n            .catch((err)=>console.log(\"error movie: \",err));\r\n        }\r\n    }\r\n\r\n    return (\r\n        < div className=\"row\">\r\n            <h3>{title}</h3>\r\n            <div className=\"row__posters\">\r\n\r\n                {movies.map(movie=>(\r\n                    <img \r\n                    onClick={()=>handleClick(movie)}\r\n                    key={movie.id}\r\n                    className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                    src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name}/>\r\n                ))}\r\n\r\n            </div>\r\n\r\n            {trailerUrl && <Youtube videoId={trailerUrl} opts={opts}  />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY= \"3d4f9629c028cf682325dda9c9ef5ebd\";\r\n\r\nconst requests={\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOrginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React,{useState,useEffect} from 'react'\r\nimport requests from './requests.js'\r\nimport axios from 'axios';\r\nimport './Banner.css'\r\n\r\nfunction Banner() {\r\n    const [randMovie,setRandMovie]=useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n           const result=await axios.get(`https://api.themoviedb.org/3${requests.fetchNetflixOrginals}`);\r\n           console.log(result);\r\n           setRandMovie(result.data.results[Math.floor( Math.random()*result.data.results.length-1 )]);\r\n           //console.log(randMovie);\r\n           //getting random movie\r\n        }\r\n    \r\n    fetchData();\r\n    }, []);\r\n\r\n    function truncate(str,n){\r\n        return str?.length>n ? str.substr(0,n-1)+\"...\" : str;\r\n    }\r\n    \r\n    return (\r\n        <header className=\"banner\"\r\n         style={{\r\n             backgroundSize:\"cover\",\r\n             backgroundImage:`url(\"https://image.tmdb.org/t/p/original/${randMovie?randMovie.backdrop_path:\"\"}\")`, \r\n             backgroundPosition:\"center center\", }}\r\n        >\r\n            <div className=\"banner__contents\">\r\n                  <h2 className=\"banner_title\">{randMovie?.title || randMovie?.name || randMovie?.original_name }</h2>\r\n                  <div className=\"banner__buttons\">\r\n                      <button className=\"banner_button\">Play</button>\r\n                      <button className=\"banner_button\">My List</button>\r\n                  </div>\r\n                  <h1 className=\"banner_description\">{truncate(randMovie?.overview,150)}</h1> {/*if description is more we put ...*/}\r\n            </div>\r\n\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React from 'react'\r\nimport firebase from 'firebase'\r\n\r\nfunction Nav(props) {\r\n   \r\n    return (\r\n        <div className=\"nav\">\r\n            <h2>NETFLIX_CLONE</h2>\r\n            <h3>@Dinesh_Reddy</h3>\r\n            {/* <img src=\"\" /> \r\n            <button onClick={props.toggle}>signout</button>*/}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React,{useState,useEffect} from 'react'\nimport './App.css';\nimport Row from './Row.js'\nimport requests from './requests.js'\nimport Banner from './Banner.js'\nimport Nav from './Nav'\nimport './Nav.css'\nimport firebase from 'firebase'\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth'\n\n//API Key  3d4f9629c028cf682325dda9c9ef5ebd\n// API Request  https://api.themoviedb.org/3/movie/550?api_key=3d4f9629c028cf682325dda9c9ef5ebd\n\nfirebase.initializeApp({\n  apiKey:\"AIzaSyAZVyoI8Cm4f6iHj7x4TQrmP0kRve24w_c\",\n  authDomain:\"netflix-b61be.firebaseapp.com\",\n  projectId: \"netflix-b61be\",\n  storageBucket: \"netflix-b61be.appspot.com\",\n  messagingSenderId: \"33119603976\",\n  appId: \"1:33119603976:web:c9d52e55e35ff6f23bf0bd\",\n  measurementId: \"G-QQXGQJQB9Z\"\n})\n\nfunction App() {\n\n  const toggle=()=>{\n    setUser(null);\n  }\n\n  const [user,setUser]=useState(null);\n\n /* uiConfig = ({\n    signInFlow:\"popup\",\n    signInOptions:[\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n    ],\n    callbacks:{\n      signInSucess:()=>false //do nothing\n    }\n  })*/\n  var provider = new firebase.auth.GoogleAuthProvider();\n\n    const handle=() => {\n    firebase.auth().signInWithPopup(provider)\n    .then((result) => {\n      setUser(result);\n    })\n    }\n\n  return (\n \n    <div className=\"App\">\n      \n      { !user ? (\n        <div className=\"login\" >\n          <h1 style={{color:\"red\",margin:\"20px\"}}>NETFLIX</h1>\n           <button onClick={handle}>SIGNIN WITH GOOGLE</button>\n       </div>\n      ):(\n        <React.Fragment>\n          <button style={{fontSize:\"20px\",backgroundColor:\"white\",color:\"black\",padding:\"3px\",borderRadius:\"2px\",marginLeft:\"10px\",marginTop:\"3px\"}} onClick={()=> setUser(null) }>signout</button>\n          <Nav/>\n          <Banner/>\n          <Row title=\"NetflixOrginals\" fetchUrl={requests.fetchNetflixOrginals} isLargeRow/> \n          /*the size of 1st row is large than other rows*/ \n          <Row title=\"Trending\" fetchUrl={requests.fetchTrending}/>\n          <Row title=\"TopRated\" fetchUrl={requests.fetchTopRated}/>\n          <Row title=\"ActionMovie\" fetchUrl={requests.fetchActionMovies}/>\n          <Row title=\"ComedyMovies\" fetchUrl={requests.fetchComedyMovies}/>\n          <Row title=\"HorrorMovies\" fetchUrl={requests.fetchHorrorMovies}/>\n          <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>      \n      </React.Fragment>\n      )\n    }\n\n    </div> \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}